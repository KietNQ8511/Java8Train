	Introduce in Java 8
	
	the stream API is used to process collections of objects. 
	A stream is a sequence of objects that supports various methods which can be pipelined to produce the desired result
	before proceeding further let us discuss out the difference between Collection and Streams in order to understand why this concept was introduced
	
	If we want to represent a group of objects as a single entity then we should go for collection.
	if you want to process objects from the collection then we should go for streams
	
	If we want to use the concept of streams then stream() is the method to be used. Stream is available as an interface
	Stream s  = c.stream();   // c refers to the collection.
	so on the collection, we are calling the stream() method and at same time, 
	we are storing it as the Stream object. Henceforth, this way we are getting the Stream object.
	
	Note: Stream are present in java's utility package named java.util.stream
	
	Let us now start with the basic components involved in streams. They as listed and as follows:
	 - Sequence of Elements
	 - Source
	 - Aggregate Operations
	 - Pipelining
	 - Internal iteration
	
	Features of Java stream?
	 - A stream is not a data structure instead it takes input from the Collections, Arrays, or I/O channels
	 - Stream don't change the original data structure, they only provide the result as per the pipelined methods.
	 - Each intermediate operation is lazily executed and returns a stream as a result, hence various intermediate operations can be pipelined. 
	 	Terminal operations mark the end of the stream and return the result.
	 - Before moving ahead in the concept consider an example in which we are having ArrayList of integers,
	  	and we suppose we apply a filter to get only even numbers from the object inserted.

  	
  	
  	
  	
  	- There are broadly 3 types of operations that are carried over streams namely as follows as depicted from the image shown above:
  	1. Intermediate operations
  	2. Terminal operations
  	3. Short-circuit operations
  	
  	Let us discuss out intermediate operations here only in streams to a certain depth with the help of 
  		an example in order to figure out other operations via theoretical means. 
  	So, there are 3 types of Intermediate operations which are as follows:
  	
  	Operation 1: filter() method
  	Operation 2: Map() method
  	Operation 3: sorted() method
  	
  	All three of them are discussed below as they go hand in hand in nearly most of the scenarios and 
  		to provide better understanding by using them later by implementing in our clean java programs below. 
  	As we already have studied in the above example of which we are trying to filter processed object 
  		can be interpreted as filter() operation operated over streams.
  	Later on from that processed filtered elements of objects, we are collecting the elements back to List using Collectors 
  		for which we have imported a specific package named 
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	